AWSTemplateFormatVersion: '2010-09-09'
Description: SignalZero Symbol Store API (DynamoDB + Lambda + API Gateway + API Key Auth)

Resources:

  SymbolStoreLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/SymbolStoreHandler
      RetentionInDays: 14

  SymbolStoreTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SymbolStore
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: symbol_domain
          AttributeType: S
        - AttributeName: symbol_tag
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: DomainIndex
          KeySchema:
            - AttributeName: symbol_domain
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: TagIndex
          KeySchema:
            - AttributeName: symbol_tag
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  SymbolStoreRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SymbolStoreLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt SymbolStoreTable.Arn
                  - !Sub "${SymbolStoreTable.Arn}/index/DomainIndex"
                  - !Sub "${SymbolStoreTable.Arn}/index/TagIndex"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  SymbolStorePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt SymbolStoreFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SymbolStoreAPI}/*/*"

  SymbolStoreFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SymbolStoreHandler
      Runtime: nodejs16.x
      Handler: index.handler
      Role: !GetAtt SymbolStoreRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const db = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            console.log("Received event:", JSON.stringify(event));
            const method = event.httpMethod;
            const path = event.path;
            const id = event.pathParameters?.id || event.pathParameters?.symbol_id || event.queryStringParameters?.id;
            const query = event.queryStringParameters || {};
            const body = event.body ? JSON.parse(event.body) : {};

            if (method === "GET") {
              if (id) {
                const res = await db.get({ TableName: "SymbolStore", Key: { id } }).promise();
                return { statusCode: 200, body: JSON.stringify(res.Item || {}) };
              } else if (query.symbol_domain) {
                const res = await db.query({
                  TableName: "SymbolStore",
                  IndexName: "DomainIndex",
                  KeyConditionExpression: "#d = :d",
                  ExpressionAttributeNames: { "#d": "symbol_domain" },
                  ExpressionAttributeValues: { ":d": query.symbol_domain }
                }).promise();
                return { statusCode: 200, body: JSON.stringify(res.Items || []) };
              } else if (query.symbol_tag) {
                const res = await db.query({
                  TableName: "SymbolStore",
                  IndexName: "TagIndex",
                  KeyConditionExpression: "symbol_tag = :t",
                  ExpressionAttributeValues: { ":t": query.symbol_tag }
                }).promise();
                return { statusCode: 200, body: JSON.stringify(res.Items || []) };
              }
              return { statusCode: 400, body: JSON.stringify({ error: "Invalid GET request." }) };
            }

            if (method === "PUT" && id) {
              await db.put({ TableName: "SymbolStore", Item: { id, ...body } }).promise();
              return { statusCode: 200, body: JSON.stringify({ status: "stored" }) };
            }

            return { statusCode: 400, body: JSON.stringify({ error: "Unsupported method or missing ID." }) };
          }


  SymbolStoreAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SymbolStoreAPI
      EndpointConfiguration:
        Types: [REGIONAL]

  SymbolResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SymbolStoreAPI.RootResourceId
      PathPart: symbol
      RestApiId: !Ref SymbolStoreAPI

  SymbolIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref SymbolResource
      PathPart: "{id}"
      RestApiId: !Ref SymbolStoreAPI

  GetSymbol:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref SymbolIdResource
      RestApiId: !Ref SymbolStoreAPI
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${FuncArn}/invocations
          - Region: !Ref AWS::Region
            FuncArn: !GetAtt SymbolStoreFunction.Arn

  GetSymbolsByQuery:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref SymbolResource
      RestApiId: !Ref SymbolStoreAPI
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${FuncArn}/invocations
          - Region: !Ref AWS::Region
            FuncArn: !GetAtt SymbolStoreFunction.Arn   

  SaveSymbolResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SymbolStoreAPI.RootResourceId
      PathPart: save_symbol
      RestApiId: !Ref SymbolStoreAPI

  SaveSymbolIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref SaveSymbolResource
      PathPart: "{symbol_id}"
      RestApiId: !Ref SymbolStoreAPI

  PutSaveSymbol:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref SaveSymbolIdResource
      RestApiId: !Ref SymbolStoreAPI
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${FuncArn}/invocations
          - Region: !Ref AWS::Region
            FuncArn: !GetAtt SymbolStoreFunction.Arn

  SymbolStoreProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      Description: Production stage for Symbol Store API
      RestApiId: !Ref SymbolStoreAPI
      DeploymentId: !Ref SymbolStoreDeployment
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingRateLimit: 100
          ThrottlingBurstLimit: 10
          MetricsEnabled: true
      TracingEnabled: true

  SymbolStoreApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - SymbolStoreDeployment
      - SymbolStoreProdStage
    Properties:
      Name: SymbolStoreToken
      Enabled: true
      StageKeys:
        - RestApiId: !Ref SymbolStoreAPI
          StageName: prod

  SymbolStoreUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: SymbolStoreUsage
      ApiStages:
        - ApiId: !Ref SymbolStoreAPI
          Stage: !Ref SymbolStoreProdStage
      Throttle:
        RateLimit: 100
        BurstLimit: 10

  SymbolStoreUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref SymbolStoreApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref SymbolStoreUsagePlan

  SymbolStoreDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetSymbol
      - PutSaveSymbol
      - GetSymbolsByQuery
      - SymbolResource
      - SymbolIdResource
      - SaveSymbolResource
      - SaveSymbolIdResource
    Properties:
      RestApiId: !Ref SymbolStoreAPI
      Description: Deployment for Symbol Store API

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SymbolStoreFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SymbolStoreAPI}/*/*/*/*

Outputs:
  APIEndpoint:
    Description: Base URL for symbol API
    Value: !Sub https://${SymbolStoreAPI}.execute-api.${AWS::Region}.amazonaws.com/prod

  APIToken:
    Description: Symbol Store API Token
    Value: !Ref SymbolStoreApiKey
